{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP2fgjTSLs6IYtdNpjsrf2U"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"enz-PhZP_-5e","outputId":"d7d51890-f460-44ed-cffa-52ed168aa532"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","--- Running Tests ---\n","All tests passed!\n","\n","Weather Advisor Menu\n","Please select one of the following:\n","1. Ask a question\n","2. Show temperature chart\n","3. Show precipitation chart\n","4. Exit\n"]}],"source":["\n","# Define parse_weather_question() and generate_weather_response() here\n","def parse_weather_question(question):\n","    question = question.lower()\n","    parsed = {'location': None, 'attribute': None, 'time_period': 'today'}\n","\n","    if 'temperature' in question or 'temp' in question:\n","        parsed['attribute'] = 'temperature'\n","    elif 'rain' in question or 'precipitation' in question:\n","        parsed['attribute'] = 'precipitation'\n","\n","    if 'tomorrow' in question:\n","        parsed['time_period'] = 'tomorrow'\n","    elif 'week' in question or '5 days' in question:\n","        parsed['time_period'] = '5-day'\n","\n","    tokens = question.split()\n","    for i in range(len(tokens)):\n","        if tokens[i] in ['in', 'for', 'at'] and i + 1 < len(tokens):\n","            parsed['location'] = ' '.join(tokens[i + 1:]).capitalize()\n","            break\n","        elif i == 0 and tokens[i].isalpha() and parsed['location'] is None:\n","            parsed['location'] = tokens[i].capitalize()\n","\n","    return parsed\n","\n","def generate_weather_response(parsed_question, weather_data):\n","    attribute = parsed_question['attribute']\n","    time_period = parsed_question['time_period']\n","    location = parsed_question['location']\n","\n","    if not weather_data:\n","        return f\"Sorry, I couldn't retrieve the weather data for {location}.\"\n","\n","    forecast_days = weather_data.get('forecast', {}).get('forecastday', [])\n","    if not forecast_days:\n","        return \"No forecast data available.\"\n","\n","    if time_period == 'today':\n","        if len(forecast_days) >= 1:\n","            day_data = forecast_days[0]['day']\n","            time_desc = \"today\"\n","        else:\n","            return \"No data for today.\"\n","    elif time_period == 'tomorrow':\n","        if len(forecast_days) >= 2:\n","            day_data = forecast_days[1]['day']\n","            time_desc = \"tomorrow\"\n","        else:\n","            return \"No data for tomorrow.\"\n","    elif time_period == '5-day':\n","        response = f\"Here is the 5-day forecast for {location}:\\n\"\n","        for day in forecast_days:\n","            date = day['date']\n","            avg_temp = day['day'].get('avgtemp_c', 'N/A')\n","            rain_chance = day['day'].get('daily_chance_of_rain', 'N/A')\n","            response += f\"{date}: Avg Temp: {avg_temp}°C, Rain: {rain_chance}%\\n\"\n","        return response\n","    else:\n","        return \"Time period not recognized.\"\n","\n","    if attribute == 'temperature':\n","        return f\"The average temperature in {location} {time_desc} is {day_data.get('avgtemp_c', 'N/A')}°C.\"\n","    elif attribute == 'precipitation':\n","        return f\"There is a {day_data.get('daily_chance_of_rain', 'N/A')}% chance of rain in {location} {time_desc}.\"\n","    else:\n","        return \"I couldn't identify the weather detail you're asking for.\"\n","\n","# Define the menu function outside of generate_weather_response\n","def main_menu():\n","    print(\"=== Welcome to Weather Advisor ===\")\n","    last_location = None\n","\n","    while True:\n","        print(\"\\nWeather Advisor Menu\")\n","        print(\"Please select one of the following:\")\n","        choice = pyip.inputMenu(\n","            ['Ask a question', 'Show temperature chart', 'Show precipitation chart', 'Exit'],\n","            numbered=True\n","        )\n","\n","        if choice == 'Ask a question':\n","            question = input(\"What would you like to know about the weather?\\n> \")\n","            parsed = parse_weather_question(question)\n","            data = get_weather_data(parsed['location'])\n","            response = generate_weather_response(parsed, data)\n","            print(\"\\n\" + response + \"\\n\")\n","            last_location = parsed['location']\n","\n","        elif choice in ['Show temperature chart', 'Show precipitation chart']:\n","            if last_location:\n","                use_last = pyip.inputYesNo(f\"Use last location ({last_location})? (yes/no): \")\n","                if use_last == 'yes':\n","                    location = last_location\n","                else:\n","                    location = pyip.inputStr(\"Enter a location: \")\n","                    last_location = location\n","            else:\n","                location = pyip.inputStr(\"Enter a location: \")\n","                last_location = location\n","\n","            data = get_weather_data(location)\n","            if data:\n","                if choice == 'Show temperature chart':\n","                    create_temperature_visualisation(data)\n","                else:\n","                    create_precipitation_visualisation(data)\n","\n","        elif choice == 'Exit':\n","            print(\"Goodbye!\")\n","            break\n","\n","## Include sample input/output for each function\n","def run_tests():\n","    print(\"\\n--- Running Tests ---\")\n","    sample_location = \"London\"\n","    data = get_weather_data(sample_location)\n","    assert data is not None, \"Failed to get weather data.\"\n","    assert \"forecast\" in data, \"Missing 'forecast' in response.\"\n","    assert \"forecastday\" in data[\"forecast\"], \"Missing 'forecastday' in forecast.\"\n","    assert \"day\" in data[\"forecast\"][\"forecastday\"][0], \"Missing 'day' in forecastday.\"\n","    print(\"All tests passed!\")\n","\n","# === Run the application ===\n","if __name__ == \"__main__\":\n","    run_tests()\n","    menu()"]}]}